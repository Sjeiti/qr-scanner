{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\r\n    /* async */\r\n    static hasCamera() {\r\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\r\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\r\n        // given. That doesn't matter for us though as we don't require labels.\r\n        return navigator.mediaDevices.enumerateDevices()\r\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\r\n            .catch(() => false);\r\n    }\r\n\r\n    constructor(video, onDecode, canvasSize = QrScanner.DEFAULT_CANVAS_SIZE) {\r\n        this.$video = video;\r\n        this.$canvas = document.createElement('canvas');\r\n        this._onDecode = onDecode;\r\n        this._active = false;\r\n        this._paused = false;\r\n\r\n        this.$canvas.width = canvasSize;\r\n        this.$canvas.height = canvasSize;\r\n        this._sourceRect = {\r\n            x: 0,\r\n            y: 0,\r\n            width: canvasSize,\r\n            height: canvasSize\r\n        };\r\n\r\n        this._initCSS();\r\n\r\n        this._onCanPlay = this._onCanPlay.bind(this);\r\n        this._onPlay = this._onPlay.bind(this);\r\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\r\n\r\n        this.$video.classList.add('qr-scanner');\r\n        this.$video.addEventListener('canplay', this._onCanPlay);\r\n        this.$video.addEventListener('play', this._onPlay);\r\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\r\n\r\n        this._qrWorker = new Worker(QrScanner.WORKER_PATH);\r\n    }\r\n\r\n    destroy() {\r\n        this.$video.removeEventListener('canplay', this._onCanPlay);\r\n        this.$video.removeEventListener('play', this._onPlay);\r\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\r\n\r\n        this.stop();\r\n        this._qrWorker.postMessage({\r\n            type: 'close'\r\n        });\r\n    }\r\n\r\n    /* async */\r\n    start() {\r\n        if (this._active && !this._paused) {\r\n            return Promise.resolve();\r\n        }\r\n        if (window.location.protocol !== 'https:') {\r\n            // warn but try starting the camera anyways\r\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\r\n        }\r\n        this._active = true;\r\n        this._paused = false;\r\n        if (document.hidden) {\r\n            // camera will be started as soon as tab is in foreground\r\n            return Promise.resolve();\r\n        }\r\n        clearTimeout(this._offTimeout);\r\n        this._offTimeout = null;\r\n        if (this.$video.srcObject) {\r\n            // camera stream already/still set\r\n            this.$video.play();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        let facingMode = 'environment';\r\n        return this._getCameraStream('environment', true)\r\n            .catch(() => {\r\n                // we (probably) don't have an environment camera\r\n                facingMode = 'user';\r\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\r\n            })\r\n            .then(stream => {\r\n                this.$video.srcObject = stream;\r\n                this._setVideoMirror(facingMode);\r\n            })\r\n            .catch(e => {\r\n                this._active = false;\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    stop() {\r\n        this.pause();\r\n        this._active = false;\r\n    }\r\n\r\n    pause() {\r\n        this._paused = true;\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n        this.$video.pause();\r\n        if (this._offTimeout) {\r\n            return;\r\n        }\r\n        this._offTimeout = setTimeout(() => {\r\n            const track = this.$video.srcObject && this.$video.srcObject.getTracks()[0];\r\n            if (!track) return;\r\n            track.stop();\r\n            this.$video.srcObject = null;\r\n            this._offTimeout = null;\r\n        }, 300);\r\n    }\r\n\r\n    /* async */\r\n    static scanImage(imageOrFileOrUrl, sourceRect=null, worker=null, canvas=null, fixedCanvasSize=false,\r\n                     alsoTryWithoutSourceRect=false) {\r\n        let createdNewWorker = false;\r\n        let promise = new Promise((resolve, reject) => {\r\n            if (!worker) {\r\n                worker = new Worker(QrScanner.WORKER_PATH);\r\n                createdNewWorker = true;\r\n                worker.postMessage({ type: 'inversionMode', data: 'both' }); // scan inverted color qr codes too\r\n            }\r\n            let timeout, onMessage, onError;\r\n            onMessage = event => {\r\n                if (event.data.type !== 'qrResult') {\r\n                    return;\r\n                }\r\n                worker.removeEventListener('message', onMessage);\r\n                worker.removeEventListener('error', onError);\r\n                clearTimeout(timeout);\r\n                if (event.data.data !== null) {\r\n                    resolve(event.data.data);\r\n                } else {\r\n                    reject('QR code not found.');\r\n                }\r\n            };\r\n            onError = (e) => {\r\n                worker.removeEventListener('message', onMessage);\r\n                worker.removeEventListener('error', onError);\r\n                clearTimeout(timeout);\r\n                const errorMessage = !e ? 'Unknown Error' : (e.message || e);\r\n                reject('Scanner error: ' + errorMessage);\r\n            };\r\n            worker.addEventListener('message', onMessage);\r\n            worker.addEventListener('error', onError);\r\n            timeout = setTimeout(() => onError('timeout'), 3000);\r\n            QrScanner._loadImage(imageOrFileOrUrl).then(image => {\r\n                const imageData = QrScanner._getImageData(image, sourceRect, canvas, fixedCanvasSize);\r\n                worker.postMessage({\r\n                    type: 'decode',\r\n                    data: imageData\r\n                }, [imageData.data.buffer]);\r\n            }).catch(onError);\r\n        });\r\n\r\n        if (sourceRect && alsoTryWithoutSourceRect) {\r\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, worker, canvas, fixedCanvasSize));\r\n        }\r\n\r\n        promise = promise.finally(() => {\r\n            if (!createdNewWorker) return;\r\n            worker.postMessage({\r\n                type: 'close'\r\n            });\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\r\n        this._qrWorker.postMessage({\r\n            type: 'grayscaleWeights',\r\n            data: { red, green, blue, useIntegerApproximation }\r\n        });\r\n    }\r\n\r\n    setInversionMode(inversionMode) {\r\n        this._qrWorker.postMessage({\r\n            type: 'inversionMode',\r\n            data: inversionMode\r\n        });\r\n    }\r\n\r\n    _onCanPlay() {\r\n        this._updateSourceRect();\r\n        this.$video.play();\r\n    }\r\n\r\n    _onPlay() {\r\n        this._updateSourceRect();\r\n        this._scanFrame();\r\n    }\r\n\r\n    _onVisibilityChange() {\r\n        if (document.hidden) {\r\n            this.pause();\r\n        } else if (this._active) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    _updateSourceRect() {\r\n        const smallestDimension = Math.min(this.$video.videoWidth, this.$video.videoHeight);\r\n        const sourceRectSize = Math.round(2 / 3 * smallestDimension);\r\n        this._sourceRect.width = this._sourceRect.height = sourceRectSize;\r\n        this._sourceRect.x = (this.$video.videoWidth - sourceRectSize) / 2;\r\n        this._sourceRect.y = (this.$video.videoHeight - sourceRectSize) / 2;\r\n    }\r\n\r\n    _scanFrame() {\r\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\r\n        // using requestAnimationFrame to avoid scanning if tab is in background\r\n        requestAnimationFrame(() => {\r\n            QrScanner.scanImage(this.$video, this._sourceRect, this._qrWorker, this.$canvas, true)\r\n                .then(this._onDecode, error => {\r\n                    if (this._active && error !== 'QR code not found.') {\r\n                        console.error(error);\r\n                    }\r\n                })\r\n                .then(() => this._scanFrame());\r\n        });\r\n    }\r\n\r\n    _getCameraStream(facingMode, exact = false) {\r\n        const constraintsToTry = [{\r\n            width: { min: 1024 }\r\n        }, {\r\n            width: { min: 768 }\r\n        }, {}];\r\n\r\n        if (facingMode) {\r\n            if (exact) {\r\n                facingMode = { exact: facingMode };\r\n            }\r\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\r\n        }\r\n        return this._getMatchingCameraStream(constraintsToTry);\r\n    }\r\n\r\n    _getMatchingCameraStream(constraintsToTry) {\r\n        if (constraintsToTry.length === 0) {\r\n            return Promise.reject('Camera not found.');\r\n        }\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: constraintsToTry.shift()\r\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\r\n    }\r\n\r\n    _setVideoMirror(facingMode) {\r\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\r\n        this.$video.classList.toggle('qr-scanner--mirror', facingMode==='user');\r\n    }\r\n\r\n    _initCSS(){\r\n        const stylesheet = Array.from(document.styleSheets).shift()||this._createStylesheet()\r\n        stylesheet.addRule('.qr-scanner', 'transform: scaleX(1);', 0)\r\n        stylesheet.addRule('.qr-scanner--mirror', 'transform: scaleX(-1);', 1)\r\n    }\r\n\r\n    _createStylesheet(){\r\n        const sheet = document.createElement('style');\r\n        document.head.appendChild(sheet);\r\n        return sheet;\r\n    }\r\n\r\n    static _getImageData(image, sourceRect=null, canvas=null, fixedCanvasSize=false) {\r\n        canvas = canvas || document.createElement('canvas');\r\n        const sourceRectX = sourceRect && sourceRect.x? sourceRect.x : 0;\r\n        const sourceRectY = sourceRect && sourceRect.y? sourceRect.y : 0;\r\n        const sourceRectWidth = sourceRect && sourceRect.width? sourceRect.width : image.width || image.videoWidth;\r\n        const sourceRectHeight = sourceRect && sourceRect.height? sourceRect.height : image.height || image.videoHeight;\r\n        if (!fixedCanvasSize && (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight)) {\r\n            canvas.width = sourceRectWidth;\r\n            canvas.height = sourceRectHeight;\r\n        }\r\n        const context = canvas.getContext('2d', { alpha: false });\r\n        context.imageSmoothingEnabled = false; // gives less blurry images\r\n        context.drawImage(image, sourceRectX, sourceRectY, sourceRectWidth, sourceRectHeight, 0, 0, canvas.width, canvas.height);\r\n        return context.getImageData(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    /* async */\r\n    static _loadImage(imageOrFileOrUrl) {\r\n        if (imageOrFileOrUrl instanceof HTMLCanvasElement || imageOrFileOrUrl instanceof HTMLVideoElement\r\n            || window.ImageBitmap && imageOrFileOrUrl instanceof window.ImageBitmap\r\n            || window.OffscreenCanvas && imageOrFileOrUrl instanceof window.OffscreenCanvas) {\r\n            return Promise.resolve(imageOrFileOrUrl);\r\n        } else if (imageOrFileOrUrl instanceof Image) {\r\n            return QrScanner._awaitImageLoad(imageOrFileOrUrl).then(() => imageOrFileOrUrl);\r\n        } else if (imageOrFileOrUrl instanceof File || imageOrFileOrUrl instanceof URL\r\n            ||  typeof(imageOrFileOrUrl)==='string') {\r\n            const image = new Image();\r\n            if (imageOrFileOrUrl instanceof File) {\r\n                image.src = URL.createObjectURL(imageOrFileOrUrl);\r\n            } else {\r\n                image.src = imageOrFileOrUrl;\r\n            }\r\n            return QrScanner._awaitImageLoad(image).then(() => {\r\n                if (imageOrFileOrUrl instanceof File) {\r\n                    URL.revokeObjectURL(image.src);\r\n                }\r\n                return image;\r\n            });\r\n        } else {\r\n            return Promise.reject('Unsupported image type.');\r\n        }\r\n    }\r\n\r\n    /* async */\r\n    static _awaitImageLoad(image) {\r\n        return new Promise((resolve, reject) => {\r\n            if (image.complete && image.naturalWidth!==0) {\r\n                // already loaded\r\n                resolve();\r\n            } else {\r\n                let onLoad, onError;\r\n                onLoad = () => {\r\n                    image.removeEventListener('load', onLoad);\r\n                    image.removeEventListener('error', onError);\r\n                    resolve();\r\n                };\r\n                onError = () => {\r\n                    image.removeEventListener('load', onLoad);\r\n                    image.removeEventListener('error', onError);\r\n                    reject('Image load error');\r\n                };\r\n                image.addEventListener('load', onLoad);\r\n                image.addEventListener('error', onError);\r\n            }\r\n        });\r\n    }\r\n}\r\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\r\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\r\n"],"names":["QrScanner","navigator","mediaDevices","enumerateDevices","then","devices","some","device","kind","catch","video","onDecode","canvasSize","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","_paused","_active","width","height","_sourceRect","x","y","_initCSS","_onCanPlay","bind","_onPlay","_onVisibilityChange","classList","add","addEventListener","_qrWorker","Worker","WORKER_PATH","removeEventListener","stop","postMessage","type","Promise","resolve","window","location","protocol","console","warn","hidden","clearTimeout","_offTimeout","srcObject","play","facingMode","_getCameraStream","stream","_setVideoMirror","e","pause","setTimeout","track","imageOrFileOrUrl","sourceRect","worker","canvas","fixedCanvasSize","alsoTryWithoutSourceRect","createdNewWorker","promise","reject","data","timeout","onMessage","onError","event","_loadImage","image","imageData","buffer","scanImage","finally","red","green","blue","useIntegerApproximation","inversionMode","_updateSourceRect","_scanFrame","start","videoHeight","sourceRectSize","videoWidth","paused","ended","requestAnimationFrame","error","exact","min","constraintsToTry","forEach","constraint","_getMatchingCameraStream","length","getUserMedia","shift","toggle","_createStylesheet","stylesheet","addRule","head","appendChild","sheet","sourceRectWidth","sourceRectHeight","alpha","context","imageSmoothingEnabled","drawImage","sourceRectX","sourceRectY","getImageData","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad"],"mappings":"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"}